##############################

Маршруты (Endpoints)
1. Получение данных о акции
GET /{ticker}
Возвращает данные о текущей цене акции по её тикеру.


GET /AAPL
Ответ:

{
  "idofrequest": "1234-5678-91011-12",
  "id_stock": "hashed_string",
  "ticker": "AAPL",
  "current_price": 150.5
}

####################################
2. Регистрация пользователя
POST /register
Регистрация нового пользователя с указанием имени пользователя, пароля и электронной почты.


Ответ:

{
  "id": "1234-5678-91011-12",
  "username": "sasha",
  "email": "sasha@gmail.com",
  "is_active": true
}






################################
3. Получение токена
POST /get_token
Авторизация пользователя по логину и паролю. Возвращает JWT-токен.


Ответ:

{
  "access_token": "jwt_token",
  "token_type": "bearer",
  "sasha": "внесён в систему с ключом"
}



###########################
4. Логин пользователя (JWT)
POST /login
Проверяет, действителен ли JWT-токен.

Ответ вида:

{
  "sasha": "Статус: В сети"
}



######################################
5. Логаут пользователя (JWT)
POST /logout
Аннулирует токен и завершает сессию пользователя.


Ответ вида:


{
  "sasha": "Сессия завершена. Статус: не в сети"
}


######################################
6. Создание новой задачи
POST /{username}/tasks
Создаёт новую задачу для пользователя.


Ответ вида:

{
  "id_task": "1234-5678-91011-12",
  "user_id": "sasha",
  "bodytask": "Новая задача",
  "created_at": "2024-10-08T12:34:56.789Z",
  "in_process": true
}


#########################################
7. Получение всех задач пользователя
GET /{username}/tasks
Возвращает список всех задач, созданных пользователем.


Ответ Вида:
[
  {
    "id_task": "1234-5678-91011-12",
    "user_id": "sasha",
    "bodytask": "Новая задача",
    "created_at": "2024-10-08T12:34:56.789Z",
    "in_process": true
  }
]

##########################################
8. Обновление задачи
PUT /{username}/tasks/{task_id}
Обновляет текст существующей задачи.

Ответ вида:
{
  "id_task": "1234-5678-91011-12",
  "user_id": "sasha",
  "bodytask": "Обновлённая задача",
  "created_at": "2024-10-08T12:34:56.789Z",
  "in_process": true
}


###############################################
9. Удаление задачи
DELETE /{username}/tasks/{task_id}
Удаляет задачу пользователя по её ID.

Ответ Вида:

{
  "сообщение": "Задача успешно удалена"
}
##############################

Валидация
Пароли: Пароль должен быть длиной минимум 8 символов, содержать буквы и цифры, и не состоять только из пробелов.
JWT-токены: Токен должен быть действительным и не должен быть в чёрном списке.

##############################

Ограничение кол-ва запросов 
Используется библиотека SlowAPI для ограничения количества запросов от одного пользователя.
Что указано в декораторе библиотеки

##############################

!!!Работа с базой данных!!!

Используется PostgreSQL с библиотекой SQLAlchemy для создания и управления таблицами:

Users — для хранения данных пользователей.
Tasks — для хранения задач.
Stocks — для хранения данных о акциях.
База данных подключена через SQLAlchemy и управляется сессиями через sessionmaker (фабрика сессий)